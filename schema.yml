openapi: 3.0.3
info:
  title: Vscubing Api
  version: 0.0.0
  description: vscubing Api
paths:
  /api/accounts/change-username/:
    put:
      operationId: accounts_change_username_update
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Input'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Input'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Input'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/accounts/current-user/:
    get:
      operationId: accounts_current_user_retrieve
      tags:
      - accounts
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/accounts/google/login/:
    post:
      operationId: accounts_google_login_create
      description: |-
        class used for social authentications
        example usage for facebook with access_token
        -------------
        from allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter

        class FacebookLogin(SocialLoginView):
            adapter_class = FacebookOAuth2Adapter
        -------------

        example usage for facebook with code

        -------------
        from allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter
        from allauth.socialaccount.providers.oauth2.client import OAuth2Client

        class FacebookLogin(SocialLoginView):
            adapter_class = FacebookOAuth2Adapter
            client_class = OAuth2Client
            callback_url = 'localhost:8000'
        -------------
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SocialLogin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SocialLogin'
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialLogin'
          description: ''
  /api/accounts/token/refresh/:
    post:
      operationId: accounts_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/contests/contests/:
    get:
      operationId: contests_contests_retrieve
      parameters:
      - in: query
        name: limit
        schema:
          type: integer
        description: count of contest to be returned
      - in: query
        name: offset
        schema:
          type: integer
        description: offset
      - in: query
        name: order_by
        schema:
          type: string
          enum:
          - -created_at
          - created_at
        description: order by something
      tags:
      - contests
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contests.ContestListOutput'
          description: ''
  /api/contests/ongoing-contest/current-solve/:
    get:
      operationId: contests_ongoing_contest_current_solve_retrieve
      parameters:
      - in: query
        name: contest_slug
        schema:
          type: string
        description: contest slug
        required: true
      - in: query
        name: discipline_slug
        schema:
          type: string
        description: discipline slug
        required: true
      tags:
      - contests
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Output'
          description: ''
  /api/contests/ongoing-contest/retrieve/:
    get:
      operationId: contests_ongoing_contest_retrieve_retrieve
      tags:
      - contests
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/contests/ongoing-contest/submitted-solves/:
    get:
      operationId: contests_ongoing_contest_submitted_solves_retrieve
      parameters:
      - in: query
        name: contest_slug
        schema:
          type: string
        description: contest slug
      - in: query
        name: discipline_slug
        schema:
          type: string
        description: discipline slug
        required: true
      tags:
      - contests
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Output'
          description: ''
  /api/contests/round-sessions/with-solves/:
    get:
      operationId: contests_round_sessions_with_solves_retrieve
      parameters:
      - in: query
        name: contest_id
        schema:
          type: integer
        description: contest id
        required: true
      - in: query
        name: discipline_id
        schema:
          type: integer
        description: discipline id
        required: true
      - in: query
        name: order_by
        schema:
          type: string
          enum:
          - -avg_ms
          - avg_ms
        description: order by something
      tags:
      - contests
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contests.RoundSessionWithSolvesListOutput'
          description: ''
  /api/contests/solves/{id}/retrieve/:
    get:
      operationId: contests_solves_retrieve_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - contests
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Output'
          description: ''
  /api/contests/solves/best-in-every-discipline/:
    get:
      operationId: contests_solves_best_in_every_discipline_retrieve
      tags:
      - contests
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contests.SolveListBestInEveryDiscipline'
          description: ''
  /api/contests/solves/best-of-every-user/:
    get:
      operationId: contests_solves_best_of_every_user_retrieve
      parameters:
      - in: query
        name: discipline
        schema:
          type: string
        description: discipline_slug
        required: true
      tags:
      - contests
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Output'
          description: ''
  /api/contests/solves/create/:
    post:
      operationId: contests_solves_create_create
      parameters:
      - in: query
        name: contest_id
        schema:
          type: integer
        description: contest id
        required: true
      - in: query
        name: discipline_id
        schema:
          type: integer
        description: discipline id
        required: true
      - in: query
        name: scramble_id
        schema:
          type: integer
        description: scramble id
        required: true
      tags:
      - contests
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
          application/x-www-form-urlencoded:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
          multipart/form-data:
            schema:
              type: object
              additionalProperties: {}
              description: Unspecified request body
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contests.SolveCreateOutput'
          description: ''
  /api/contests/solves/submit/{id}/:
    patch:
      operationId: contests_solves_submit_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - contests
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                json: data
          description: ''
components:
  schemas:
    Input:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          pattern: ^[a-zA-Z0-9_]*$
          maxLength: 20
          minLength: 3
      required:
      - id
      - username
    Output:
      type: object
      properties:
        current_scramble:
          $ref: '#/components/schemas/inline_serializer'
        info:
          $ref: '#/components/schemas/inline_serializer'
        current_solve:
          $ref: '#/components/schemas/inline_serializer'
      required:
      - current_scramble
      - current_solve
      - info
    SocialLogin:
      type: object
      properties:
        access_token:
          type: string
        code:
          type: string
        id_token:
          type: string
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          pattern: ^[a-zA-Z0-9_]*$
          maxLength: 20
          minLength: 3
      required:
      - id
      - username
    contests.ContestListOutput:
      type: object
      properties:
        limit:
          type: integer
        offset:
          type: integer
        count:
          type: integer
        next:
          type: string
        previous:
          type: string
        results:
          type: array
          items:
            $ref: '#/components/schemas/inline_serializer'
      required:
      - count
      - limit
      - next
      - offset
      - previous
      - results
    contests.RoundSessionWithSolvesListOutput:
      type: object
      properties:
        id:
          type: integer
        avg_ms:
          type: integer
        is_dnf:
          type: boolean
        is_finished:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/inline_serializer'
        contest:
          $ref: '#/components/schemas/inline_serializer'
        solve_set:
          type: array
          items:
            $ref: '#/components/schemas/inline_serializer'
      required:
      - avg_ms
      - contest
      - created_at
      - id
      - is_dnf
      - is_finished
      - solve_set
      - updated_at
      - user
    contests.SolveCreateOutput:
      type: object
      properties:
        id:
          type: integer
        time_ms:
          type: integer
        created_at:
          type: string
          format: date-time
        scramble:
          $ref: '#/components/schemas/inline_serializer'
      required:
      - created_at
      - id
      - scramble
      - time_ms
    contests.SolveListBestInEveryDiscipline:
      type: object
      properties:
        id:
          type: integer
        time_ms:
          type: integer
        created_at:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/inline_serializer'
        scramble:
          $ref: '#/components/schemas/inline_serializer'
        contest:
          $ref: '#/components/schemas/inline_serializer'
        discipline:
          $ref: '#/components/schemas/inline_serializer'
      required:
      - contest
      - created_at
      - discipline
      - id
      - scramble
      - time_ms
      - user
    inline_serializer:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        slug:
          type: string
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
      required:
      - end_date
      - id
      - name
      - slug
      - start_date
  securitySchemes:
    jwtCookieAuth:
      type: apiKey
      in: cookie
      name: jwt-auth
    jwtHeaderAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
